import { useState, useCallback } from "react";

export interface ApiResponse<T = any> {
  data: T | null;
  message: string;
  error: string | null;
  status: API_STATUS;
}

export enum API_STATUS {
  IDLE = "IDLE",
  PENDING = "PENDING",
  SUCCESS = "SUCCESS",
  FAILED = "FAILED",
}

export const useApiAction = <T, Params extends any[]>(
  asyncFunction: (...params: Params) => Promise<ApiResponse<T>>,
) => {
  const [state, setState] = useState<ApiResponse<T>>({
    data: null,
    message: "",
    error: null,
    status: API_STATUS.IDLE,
  });

  const [isPending, setIsPending] = useState(false);

  const trigger = useCallback(
    async (...params: Params) => {
      setIsPending(true);
      setState((prev) => ({ ...prev, status: API_STATUS.PENDING }));

      try {
        const response = await asyncFunction(...params);
        setState({
          data: response.data,
          message: response.message,
          error: null,
          status: API_STATUS.SUCCESS,
        });
      } catch (error) {
        setState({
          data: null,
          message: "",
          error: (error as Error).message,
          status: API_STATUS.FAILED,
        });
      } finally {
        setIsPending(false);
      }
    },
    [asyncFunction],
  );

  return [state, trigger, isPending] as const;
};
